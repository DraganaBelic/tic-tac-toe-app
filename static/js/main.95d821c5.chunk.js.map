{"version":3,"sources":["components/ReadyToGo.js","components/Square.js","actions/actionType.js","actions/actionCreators.js","components/Board.js","components/History.js","storage.js","components/GameComponent.js","components/GameResultPage.js","StartPage.js","reducer/reducer.js","store.js","App.js","serviceWorker.js","index.js"],"names":["ReadyToGo","props","react_default","a","createElement","className","onClick","begin","Square","disable","disabledSquares","indexOf","squareIndex","renderValue","classes","push","value","disabled","join","onSquareClicked","UPDATE_HISTORY","ADD_RESULT","toggleNextPlayer","oIsNext","type","addSelectedFieldToStore","selectedField","updateHistory","history","addResult","result","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderSquare","i","_this$props","squareValue","key","renderBoard","bind","assertThisInitialized","prevProps","prevState","_this$props2","row","col","board","counter","elements","j","Component","connect","state","dispatch","History","onUndo","historyOfTurns","forEach","el","index","player","square","length","Button","setToLocalStorage","localStorageObject","localStorage","setItem","selectedFields","JSON","stringify","getFromLocalStorage","property","getItem","parse","solutions","GameComponent","onPlayerMove","currentHistory","toConsumableArray","xSquares","oSquares","map","newMap","reduce","obj","setState","clicked","checkWinner","values","splice","_this$props3","clear","_this$props4","includes","winner","looser","sort","tie","_this$props5","components_Board","rerender","components_History","field","GameResultPage","playAgain","react","StartPage","getRandomValue","Math","random","onBegin","randomValue","gameStart","components_GameResultPage","components_GameComponent","components_ReadyToGo","reducer","store","arguments","undefined","action","objectSpread","createStore","App","es","src_StartPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95d821c5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction ReadyToGo (props) {\r\n\r\n    return (\r\n        <div>\r\n            <p className=\"header\">Ready to go ?</p>\r\n            <div className=\"offset-5 col-2\">\r\n                <hr></hr>\r\n            </div>\r\n            <p>When you click begin, we will randomly choose a player to start</p>\r\n        <button onClick={props.begin} className=\"beginButton\">Begin</button>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default ReadyToGo","import React from 'react';\r\n\r\nexport default function Square(props) {\r\n\r\n    let disable = props.disabledSquares.indexOf(props.squareIndex) > -1\r\n    let renderValue= \"N\"\r\n    let classes = []\r\n    classes.push('squareButton')\r\n    if(props.value === 1) {\r\n         renderValue= \"X\"\r\n        classes.push('xValue')\r\n    }\r\n\r\n    if(props.value === 0) {\r\n         renderValue= \"O\"\r\n         classes.push('oValue')\r\n    }\r\n\r\n        return (\r\n                <button \r\n                    disabled = {disable}\r\n                    className={classes.join(\" \")}\r\n                    onClick={props.onSquareClicked} >\r\n                    {renderValue}\r\n                </button>\r\n        );\r\n}\r\n","export const TOGGLE_NEXT_PLAYER= 'TOGGLE_NEXT_PLAYER'\r\nexport const ADD_SELECTED_FIELD= 'ADD_SELECTED_FIELD'\r\nexport const UPDATE_HISTORY= 'UPDATE_HISTORY'\r\nexport const ADD_RESULT= 'ADD_RESULT'","import { TOGGLE_NEXT_PLAYER, ADD_SELECTED_FIELD, UPDATE_HISTORY, ADD_RESULT } from \"./actionType\"\r\n\r\nexport const toggleNextPlayer = (oIsNext) => {\r\n    return {\r\n        type: TOGGLE_NEXT_PLAYER,\r\n        oIsNext\r\n    }\r\n}\r\nexport const addSelectedFieldToStore = (selectedField) => {\r\n    return {\r\n        type: ADD_SELECTED_FIELD,\r\n        selectedField\r\n    }\r\n}\r\nexport function updateHistory(history) {\r\n    return {\r\n      type: UPDATE_HISTORY,\r\n      history\r\n    };\r\n  }\r\n\r\n  export function addResult(result) {\r\n      return {\r\n          type: ADD_RESULT,\r\n          result\r\n      }\r\n  }","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Square from './Square';\r\nimport { updateHistory } from '../actions/actionCreators';\r\n\r\nclass Board extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.renderBoard = this.renderBoard.bind(this)\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { updateHistory, history } = this.props\r\n        if (this.props !== prevProps) {\r\n            updateHistory(history)\r\n        }\r\n    }\r\n\r\n    renderBoard(row, col) {\r\n        let board = [];\r\n        let counter =0\r\n        \r\n        for(let i=0; i< row; i+=1){\r\n            let elements = [];\r\n            for(let j=0; j<col; j += 1) {\r\n                elements.push(\r\n                    this.renderSquare(counter++)\r\n                )\r\n            }\r\n            board.push(\r\n                <div key={i} className='board-row'>\r\n                    {elements}\r\n                </div>\r\n            )\r\n\r\n        }\r\n        return board\r\n    } \r\n\r\n    renderSquare = (i) => {\r\n        const {oIsNext, selectedField, onSquareClicked, disabledSquares} = this.props\r\n        let squareValue = oIsNext ? 'O' : 'X'\r\n        let pickedValues = selectedField ? selectedField : {}\r\n        let value = pickedValues[i]\r\n        return <Square \r\n                key={i}\r\n                squareIndex={i}\r\n                squareValue={squareValue}\r\n                value={value}\r\n                onSquareClicked={()=>{onSquareClicked(i)}}\r\n                disabledSquares = {disabledSquares}\r\n                />\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='board-all'>\r\n                <div>{this.renderBoard(3, 3)}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateHistory: (history) => dispatch(updateHistory(history))\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        oIsNext: state.oIsNext,\r\n        selectedField: state.selectedField\r\n    };\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Board);","import React, { Component } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\n\r\nclass History extends Component {\r\n    render() {\r\n        const { history, onUndo } = this.props\r\n        let historyOfTurns = []\r\n        if(history) {\r\n           history.forEach((el, index) => historyOfTurns.push(\r\n           <div className='turnsMade row' key={index}>\r\n                <div className=\"col-8 pl-0\">Player {el.player === 0 ? 'O' : 'X'} chose cell {el.square + 1} </div>\r\n                {(index+1 === history.length || index+1 === history.length-1) && \r\n                 <div className=\"col-4\"><Button disabled={index+1 !== history.length}  onClick={() => onUndo(el)} className='undoBtn btn-sm'>Undo</Button></div>}\r\n            </div>\r\n           \r\n           )) \r\n        }\r\n        return (\r\n            <div className=\"col-lg-10\">\r\n                <p className=\"historyHeader\">Turn History</p>\r\n                    <div className=\"col-lg-8\">\r\n                        {historyOfTurns && historyOfTurns.length > 0 ? \r\n                        <div>\r\n                            {historyOfTurns}\r\n                        </div>\r\n                        :\r\n                        <p className=\"noTurnsMade\">Currently no turns made</p>\r\n                        }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default History","export function setToLocalStorage(localStorageObject) {\r\n\r\n    localStorage.setItem('selectedFields', localStorageObject.selectedFields)\r\n    localStorage.setItem('history', localStorageObject.history)\r\n    localStorage.setItem('oIsNext', localStorageObject.oIsNext)\r\n    localStorage.setItem('localStorageObject', JSON.stringify(localStorageObject))\r\n}\r\n\r\nexport function getFromLocalStorage(property) {\r\n    \r\n    let localStorageObject = localStorage.getItem('localStorageObject') ? JSON.parse(localStorage.getItem('localStorageObject')) : {}\r\n    switch(property) {\r\n        case 'oIsNext':\r\n            return localStorageObject.oIsNext\r\n        break\r\n        case 'history':\r\n            return localStorageObject.history ? JSON.parse(localStorageObject.history) : null\r\n        break\r\n        case 'selectedFields':\r\n            return localStorageObject.selectedFields ? JSON.parse(localStorageObject.selectedFields) : null\r\n        break\r\n         default:\r\n            return null\r\n\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Board from './Board';\r\nimport History from './History';\r\nimport { toggleNextPlayer, addSelectedFieldToStore, updateHistory, addResult } from '../actions/actionCreators';\r\nimport { setToLocalStorage, getFromLocalStorage } from '../storage';\r\n\r\nconst solutions=[\r\n    [0,1,2],\r\n    [3,4,5],\r\n    [6,7,8],\r\n    [0,4,8],\r\n    [2,4,6],\r\n    [0,3,6],\r\n    [1,4,7],\r\n    [2,5,8]\r\n]\r\n\r\nclass GameComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.checkWinner = this.checkWinner.bind(this)\r\n        this.state={\r\n            clicked: false,\r\n            disabledSquares: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { toggleNextPlayer, updateHistory, addSelectedFieldToStore } = this.props\r\n        // in case of page refresh\r\n        // get data from local storage\r\n        if(getFromLocalStorage('oIsNext')) toggleNextPlayer(getFromLocalStorage('oIsNext'))\r\n        updateHistory(getFromLocalStorage('history'))\r\n        addSelectedFieldToStore(getFromLocalStorage('selectedFields'))\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        localStorage.clear();\r\n    }\r\n\r\n    onPlayerMove = (i) => {\r\n        const { oIsNext, history, toggleNextPlayer, updateHistory, addSelectedFieldToStore } = this.props\r\n        let disabledSquares = []\r\n        let currentHistory = history ? [...history] : []\r\n        let xSquares = []\r\n        let oSquares = []\r\n        // change players turn\r\n        toggleNextPlayer(!oIsNext)\r\n        currentHistory.push({\r\n            player: oIsNext ? 1 : 0,\r\n            square: i\r\n        })\r\n        // add move to history tab\r\n        updateHistory(currentHistory)\r\n        currentHistory.map(el => {\r\n            el.player == 1 \r\n            ? xSquares.push(el.square)\r\n            : oSquares.push(el.square);\r\n            disabledSquares.push(el.square)\r\n        })\r\n        let newMap = currentHistory.reduce(function(map, obj) {\r\n            map[obj.square] = obj.player;\r\n            return map;\r\n        }, {});\r\n        // add selected field to store\r\n        addSelectedFieldToStore(newMap)\r\n          this.setState({\r\n              clicked: true,\r\n              disabledSquares: disabledSquares\r\n        })\r\n        let localStorageObject = {\r\n            history: JSON.stringify(currentHistory),\r\n            oIsNext: !oIsNext,\r\n            selectedFields: JSON.stringify(newMap)\r\n        }\r\n        // update local storage\r\n        setToLocalStorage(localStorageObject)\r\n        // check if we have a winner \r\n        this.checkWinner(xSquares, oSquares)\r\n    }\r\n\r\n    checkWinner(xSquares, oSquares) {\r\n        const { updateHistory, addResult } = this.props\r\n        let result\r\n        for(let i=0; i<solutions.length; i++) {\r\n            // check is x winner\r\n            if(xSquares.includes(solutions[i][0]) && xSquares.includes(solutions[i][1]) && xSquares.includes(solutions[i][2])) {\r\n                result = {\r\n                    winner: 'X',\r\n                    looser: 'O'\r\n                }\r\n            }\r\n            // check is o winner\r\n            if(oSquares.sort().includes(solutions[i][0]) && oSquares.sort().includes(solutions[i][1]) && oSquares.sort().includes(solutions[i][2])) {\r\n                result = {\r\n                    winner: 'O',\r\n                    looser: 'X'\r\n                }\r\n            }\r\n        }\r\n        // check if it's a tie\r\n        if(xSquares.length + oSquares.length == 9 && !result) {\r\n            result = {\r\n                tie: 'It\\'s a tie'\r\n            }\r\n        }\r\n        // if we have winner or it's a tie\r\n        // reset history and declare the winner \r\n        if(result) {\r\n            updateHistory([])\r\n            addResult(result)\r\n        }\r\n    }\r\n\r\n    onUndo = (values) => {\r\n        const { history, oIsNext, toggleNextPlayer, updateHistory, addSelectedFieldToStore } = this.props\r\n        let disabledSquares = []\r\n        let currentHistory = history ? [...history] : []\r\n\r\n        // reset player turn\r\n        toggleNextPlayer(!oIsNext)\r\n        // remove last move from history\r\n        currentHistory.splice(history.length-1, 1)\r\n        updateHistory(currentHistory)\r\n\r\n        currentHistory.map(el => \r\n            disabledSquares.push(el.square)\r\n        )\r\n        let newMap = currentHistory.reduce(function(map, obj) {\r\n            map[obj.square] = obj.player;\r\n            return map;\r\n        }, {});\r\n        addSelectedFieldToStore(newMap)\r\n        // update disabled buttons\r\n        this.setState({ disabledSquares: disabledSquares })\r\n        let localStorageObject = {\r\n            history: JSON.stringify(currentHistory),\r\n            oIsNext: oIsNext,\r\n            selectedFields: JSON.stringify(newMap)\r\n        }\r\n        // update local storage\r\n        setToLocalStorage(localStorageObject)\r\n    }\r\n\r\n    render() {\r\n        const {oIsNext, history} = this.props\r\n        let player = oIsNext ? 'Players X\\'s turn' : 'Players O\\'s turn' \r\n        return (\r\n            <div>\r\n                <div className='gameHeader'>\r\n                    <p>{player}</p>\r\n                </div>\r\n                <div className='gameBody row'> \r\n                    <div className='col-md-12 col-lg-7 game-board'>\r\n                        <Board \r\n                            onSquareClicked={this.onPlayerMove}\r\n                            history={history}\r\n                            rerender={this.state.clicked}\r\n                            disabledSquares={this.state.disabledSquares}\r\n                        />   \r\n                    </div>\r\n                    <div className='col-md-12 col-lg-5 history-board'>\r\n                        <History \r\n                        history={history}\r\n                        onUndo={this.onUndo}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateHistory: history => dispatch(updateHistory(history)),\r\n        addResult: result => dispatch(addResult(result)),\r\n        toggleNextPlayer: oIsNext => dispatch(toggleNextPlayer(oIsNext)),\r\n        addSelectedFieldToStore: field => dispatch(addSelectedFieldToStore(field))\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        oIsNext: state.oIsNext,\r\n        history: state.history\r\n    };\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(GameComponent);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Fragment } from 'react';\r\n\r\nclass GameResultPage extends Component {\r\n    componentWillUnmount() {\r\n        localStorage.clear();\r\n    }\r\n    render() {\r\n        const { winner, tie, playAgain, looser } = this.props\r\n         return (\r\n            <div>\r\n                {tie ?\r\n                 <p className=\"header\">{tie }</p>\r\n                :\r\n                <Fragment>\r\n                <p className=\"header\">Player {winner ? winner : '???'} wins</p>\r\n                <p>What a shame Player {looser ? looser : '!!!'} looks like you aren't good enough, want to try your luck again ?</p>\r\n                </Fragment>\r\n            }\r\n            <div className=\"offset-5 col-2\">\r\n                <hr></hr>\r\n            </div>\r\n            <button onClick={playAgain} className=\"beginButton\">Play again</button>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n)(GameResultPage);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ReadyToGo from './components/ReadyToGo';\r\nimport GameComponent from './components/GameComponent';\r\nimport GameResultPage from './components/GameResultPage';\r\nimport { addResult, updateHistory, addSelectedFieldToStore, toggleNextPlayer } from './actions/actionCreators';\r\nimport { getFromLocalStorage } from './storage';\r\n\r\n\r\nclass StartPage extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            gameStart: false\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const { updateHistory } = this.props;\r\n        updateHistory(getFromLocalStorage('history'));\r\n    }\r\n\r\n    getRandomValue = () => { return Math.random() > 0.5 ? true : false }\r\n    \r\n    onBegin = () => {\r\n        const { toggleNextPlayer } = this.props\r\n        // get random value to choose player's turn\r\n        let randomValue = this.getRandomValue()\r\n        this.setState({gameStart: true})\r\n        // set value oIsNext to store\r\n        toggleNextPlayer(randomValue)\r\n    }\r\n    \r\n    playAgain = () => {\r\n        const { addResult, updateHistory, addSelectedFieldToStore, toggleNextPlayer } = this.props\r\n        // get random value to choose player's turn\r\n        let randomValue = this.getRandomValue() \r\n        this.setState({gameStart: true})\r\n        // reset all values\r\n        addResult(null)\r\n        updateHistory(null)\r\n        addSelectedFieldToStore(null)\r\n        // set value oIsNext to store\r\n        toggleNextPlayer(randomValue)\r\n    }\r\n    render() {\r\n        const { result, history } = this.props\r\n        return (\r\n            <div>\r\n                { !this.state.gameStart  && !history ?\r\n                    <ReadyToGo begin={this.onBegin} /> // game start false, history [], winner undefined\r\n                    :\r\n                    result ?\r\n                    <GameResultPage winner={result.winner} tie={result.tie}  looser={result.looser} playAgain={this.playAgain} /> //game start true, winner defined\r\n                    :\r\n                    <GameComponent /> // game start true, winner undefined\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addResult: (result) => dispatch(addResult(result)),\r\n        updateHistory: (history) => dispatch(updateHistory(history)),\r\n        addSelectedFieldToStore: (field) => dispatch(addSelectedFieldToStore(field)),\r\n        toggleNextPlayer: oIsNext => dispatch(toggleNextPlayer(oIsNext))\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        result: state.result,\r\n        history: state.history\r\n    };\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(StartPage);","import { TOGGLE_NEXT_PLAYER, ADD_SELECTED_FIELD, UPDATE_HISTORY, ADD_RESULT } from \"../actions/actionType\";\r\n\r\nconst reducer = (store = {}, action) => {\r\n\r\n    switch(action.type) {\r\n        case TOGGLE_NEXT_PLAYER:\r\n            let oIsNext= action.oIsNext\r\n            return {...store, oIsNext}\r\n        break\r\n        case ADD_SELECTED_FIELD:\r\n            let selectedField = action.selectedField\r\n            return {...store, selectedField}\r\n        break\r\n        case UPDATE_HISTORY:\r\n            let history = action.history\r\n            return {...store, history}\r\n        break\r\n        case ADD_RESULT:\r\n            let result = action.result\r\n            return {...store, result}\r\n        break\r\n\r\n            default:\r\n                return store\r\n    }\r\n}\r\n\r\nexport default reducer","import { createStore } from \"redux\";\r\nimport reducer from \"./reducer/reducer\";\r\n\r\n\r\nexport const store  = createStore(reducer)","import React from 'react';\nimport './App.css';\nimport StartPage from './StartPage';\nimport { Provider } from \"react-redux\"\nimport { store } from './store';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <StartPage />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}